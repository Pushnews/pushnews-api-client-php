<?php
/**
 * NotificationSegmentation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Pushnews
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Pushnews API
 *
 * Pushnews API documentation
 *
 * OpenAPI spec version: 2.1.0
 * Contact: support@pushnews.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Pushnews\Model;

use \ArrayAccess;
use \Pushnews\ObjectSerializer;

/**
 * NotificationSegmentation Class Doc Comment
 *
 * @category Class
 * @package  Pushnews
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationSegmentation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Notification_segmentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'device' => 'string',
        'countryCode' => 'string',
        'stateCode' => 'string',
        'cityName' => 'string',
        'segmentKey' => 'string',
        'segmentValue' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'device' => null,
        'countryCode' => null,
        'stateCode' => null,
        'cityName' => null,
        'segmentKey' => null,
        'segmentValue' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'device' => 'device',
        'countryCode' => 'countryCode',
        'stateCode' => 'stateCode',
        'cityName' => 'cityName',
        'segmentKey' => 'segmentKey',
        'segmentValue' => 'segmentValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'device' => 'setDevice',
        'countryCode' => 'setCountryCode',
        'stateCode' => 'setStateCode',
        'cityName' => 'setCityName',
        'segmentKey' => 'setSegmentKey',
        'segmentValue' => 'setSegmentValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'device' => 'getDevice',
        'countryCode' => 'getCountryCode',
        'stateCode' => 'getStateCode',
        'cityName' => 'getCityName',
        'segmentKey' => 'getSegmentKey',
        'segmentValue' => 'getSegmentValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['stateCode'] = isset($data['stateCode']) ? $data['stateCode'] : null;
        $this->container['cityName'] = isset($data['cityName']) ? $data['cityName'] : null;
        $this->container['segmentKey'] = isset($data['segmentKey']) ? $data['segmentKey'] : null;
        $this->container['segmentValue'] = isset($data['segmentValue']) ? $data['segmentValue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets device
     *
     * @return string
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode countryCode
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string $stateCode stateCode
     *
     * @return $this
     */
    public function setStateCode($stateCode)
    {
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets cityName
     *
     * @return string
     */
    public function getCityName()
    {
        return $this->container['cityName'];
    }

    /**
     * Sets cityName
     *
     * @param string $cityName cityName
     *
     * @return $this
     */
    public function setCityName($cityName)
    {
        $this->container['cityName'] = $cityName;

        return $this;
    }

    /**
     * Gets segmentKey
     *
     * @return string
     */
    public function getSegmentKey()
    {
        return $this->container['segmentKey'];
    }

    /**
     * Sets segmentKey
     *
     * @param string $segmentKey segmentKey
     *
     * @return $this
     */
    public function setSegmentKey($segmentKey)
    {
        $this->container['segmentKey'] = $segmentKey;

        return $this;
    }

    /**
     * Gets segmentValue
     *
     * @return string
     */
    public function getSegmentValue()
    {
        return $this->container['segmentValue'];
    }

    /**
     * Sets segmentValue
     *
     * @param string $segmentValue segmentValue
     *
     * @return $this
     */
    public function setSegmentValue($segmentValue)
    {
        $this->container['segmentValue'] = $segmentValue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


